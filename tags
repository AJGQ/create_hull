!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	Development	//
DIM	lib/point/point.h	4;"	d
MERGE_SORT_H	lib/dynamic_array/merge_sort.h	2;"	d
POINT_H	lib/point/point.h	2;"	d
POLYGON_H	lib/polygon/polygon.h	2;"	d
Point	lib/point/point.h	/^typedef int Point[DIM];$/;"	t
Polygon	lib/polygon/polygon.h	/^} Polygon;$/;"	t	typeref:struct:sPolygon
TYPE	lib/dynamic_array/merge_sort.h	6;"	d
X	lib/point/point.h	5;"	d
Y	lib/point/point.h	6;"	d
compare_int	lib/dynamic_array/test_merge_sort.c	/^int compare_int(const int* a, const int* b){$/;"	f
main	lib/dynamic_array/test_merge_sort.c	/^int main(){$/;"	f
main	lib/point/test_point.c	/^int main(){$/;"	f
main	lib/polygon/test_polygon.c	/^int main(){$/;"	f
merge_sort	lib/dynamic_array/merge_sort.c	/^void merge_sort(TYPE* array, size_t size, $/;"	f
next	lib/polygon/polygon.h	/^    struct sPolygon* next;$/;"	m	struct:sPolygon	typeref:struct:sPolygon::sPolygon
p	lib/polygon/polygon.h	/^    Point* p;$/;"	m	struct:sPolygon
point_O	lib/point/point.h	/^static Point point_O = {0, 0};$/;"	v
point_create	lib/point/point.c	/^void point_create(Point* ret, int x, int y){$/;"	f
point_difference	lib/point/point.c	/^void point_difference(Point* ret, Point p0, Point p1){$/;"	f
point_distance	lib/point/point.c	/^float point_distance(Point p0, Point p1){$/;"	f
point_divide	lib/point/point.c	/^void point_divide(Point* ret, int s, Point p){$/;"	f
point_dot_product	lib/point/point.c	/^float point_dot_product(Point p0, Point p1){$/;"	f
point_magnitude	lib/point/point.c	/^float point_magnitude(Point p){$/;"	f
point_multiply	lib/point/point.c	/^void point_multiply(Point* ret, int s, Point p){$/;"	f
point_sum	lib/point/point.c	/^void point_sum(Point* ret, Point p0, Point p1){$/;"	f
polygon_create	lib/polygon/polygon.c	/^int polygon_create(Polygon** ret, Point* p){$/;"	f
polygon_destroy	lib/polygon/polygon.c	/^void polygon_destroy(Polygon* pol){$/;"	f
polygon_insert_behind	lib/polygon/polygon.c	/^void polygon_insert_behind(Polygon* pol, Point* p){$/;"	f
polygon_insert_front	lib/polygon/polygon.c	/^void polygon_insert_front(Polygon* pol, Point* p){$/;"	f
polygon_join	lib/polygon/polygon.c	/^void polygon_join(Polygon* pol0,$/;"	f
polygon_remove	lib/polygon/polygon.c	/^void polygon_remove(Polygon* pol){$/;"	f
prev	lib/polygon/polygon.h	/^    struct sPolygon* prev;$/;"	m	struct:sPolygon	typeref:struct:sPolygon::sPolygon
print_array	lib/dynamic_array/test_merge_sort.c	/^void print_array(int* arr, size_t size){$/;"	f
print_point	lib/point/test_point.c	/^void print_point(Point p){$/;"	f
print_pol	lib/polygon/test_polygon.c	/^void print_pol(Polygon* pol){$/;"	f
sPolygon	lib/polygon/polygon.h	/^typedef struct sPolygon{$/;"	s
